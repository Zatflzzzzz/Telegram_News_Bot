import logging
import requests
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext

import requests

from app.config.config import settings

TOKEN = settings.TELEGRAM_BOT_TOKEN
API_URL = "http://localhost:8000"

def register(username: str, password: str):

    data = {"username": username, "password": password}
    response = requests.post(f"{API_URL}/register", params=data)

    if response.status_code == 200:
        return "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Ö–æ–¥ —Å –ø–æ–º–æ—â—å—é /login."

    return f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {response.json().get('detail', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"

def login(username: str, password: str):

    data = {"username": username, "password": password}
    response = requests.post(f"{API_URL}/login", params=data)

    if response.status_code == 200:
        token = response.json()["access_token"]
        return token

    return None

user_tokens = {}

async def start(
        update: Update,
        context: CallbackContext):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π.\n"
                                    "–ö–æ–º–∞–Ω–¥—ã:\n"
                                    "/register <username> <password> ‚Äì —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n"
                                    "/login <username> <password> ‚Äì –≤—Ö–æ–¥\n"
                                    "/news_by_category <category> ‚Äì –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–π –≤–∞—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π:\n\n"
                                    "---------------------"
                                    "\nbusiness\n"
                                    "entertainment\n"
                                    "general\n"
                                    "health\n"
                                    "science\n"
                                    "sports\n"
                                    "technology\n"
                                    "---------------------\n\n"
                                    "/last_popular_news ‚Äì –ø–æ–ª—É—á–∏—Ç—å —Å–∞–º—ã–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –≤ –†–æ—Å—Å–∏–∏")


async def register_user(
        update: Update,
        context: CallbackContext):

    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /register <username> <password>")
        return

    username, password = context.args
    response = register(username, password)

    await update.message.reply_text(response)


async def login_user(
        update: Update,
        context: CallbackContext):

    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /login <username> <password>")
        return

    username, password = context.args

    token = login(username, password)

    if token:
        user_tokens[update.message.chat_id] = token

        await update.message.reply_text("–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏")
    else:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å.")


async def get_news_by_category(
        update: Update,
        context: CallbackContext):

    if update.message.chat_id not in user_tokens:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Ö–æ–¥ —Å –ø–æ–º–æ—â—å—é /login.")
        return

    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /news <category>")
        return

    category = context.args[0]
    headers = {"Authorization": f"Bearer {user_tokens[update.message.chat_id]}"}

    response = requests.get(f"{API_URL}/get_news_by_category?category={category}", headers=headers)

    if response.status_code == 200:
        news_list = response.json()

        for news in news_list:
            message = f"üì∞ –ó–∞–≥–æ–ª–æ–≤–æ–∫: {news['title']}\n\n–ê–≤—Ç–æ—Ä: {news['author']}\n\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {news["category"]}\n\n{news['urlToImage']}"
            await update.message.reply_text(message)
    else:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π.")


async def get_last_popular_news(
        update: Update,
        context: CallbackContext):

    if update.message.chat_id not in user_tokens:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Ö–æ–¥ —Å –ø–æ–º–æ—â—å—é /login.")
        return

    headers = {"Authorization": f"Bearer {user_tokens[update.message.chat_id]}"}

    response = requests.get(f"{API_URL}/get_last_popular_news", headers=headers)

    if response.status_code == 200:
        news_list = response.json()

        for news in news_list:
            message = f"üì∞ –ó–∞–≥–æ–ª–æ–≤–æ–∫: {news['title']}\n\n–ê–≤—Ç–æ—Ä: {news['author']}\n\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {news["category"]}\n\n{news['urlToImage']}"
            await update.message.reply_text(message)
    else:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π.")

def main():
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("register", register_user))
    app.add_handler(CommandHandler("login", login_user))
    app.add_handler(CommandHandler("news_by_category", get_news_by_category))
    app.add_handler(CommandHandler("last_popular_news", get_last_popular_news))

    app.run_polling()

if __name__ == "__main__":
    main()
